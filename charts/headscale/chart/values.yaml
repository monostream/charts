# Default values for radarr.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

oidc:
  issuerUrl:
  clientId:
  clientSecret:

web:
  image:
    repository: ghcr.io/tale/headplane
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.3.5"
  service:
    type: ClusterIP
    port: 3000

app:
  image:
    repository: headscale/headscale
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v0.23-debug"
  domain: ""
  zone:
  config: |
    server_url: {{ .Values.app.domain }}
    listen_addr: 0.0.0.0:8080
    metrics_listen_addr: 0.0.0.0:9090
    grpc_listen_addr: 0.0.0.0:50443
    grpc_allow_insecure: false
    noise:
      private_key_path: /data/noise_private.key
    prefixes:
      v6: fd7a:115c:a1e0::/48
      v4: 100.64.0.0/10
      allocation: sequential
    derp:
      server:
        enabled: false
        region_id: 999
        region_code: "headscale"
        region_name: "Headscale Embedded DERP"
        stun_listen_addr: "0.0.0.0:3478"
        private_key_path: /data/derp_server_private.key
        automatically_add_embedded_derp_region: true
        ipv4: 1.2.3.4
        ipv6: 2001:db8::1
      urls:
        - https://controlplane.tailscale.com/derpmap/default
      paths: []
      auto_update_enabled: true
      update_frequency: 24h
    disable_check_updates: false
    ephemeral_node_inactivity_timeout: 30m

    database:
      type: sqlite
      debug: true
      gorm:
        prepare_stmt: true
        parameterized_queries: true
        skip_err_record_not_found: true
        slow_threshold: 1000
      sqlite:
        path: /data/db.sqlite
        write_ahead_log: true
    acme_url: https://acme-v02.api.letsencrypt.org/directory
    acme_email: ""
    tls_letsencrypt_hostname: ""
    tls_letsencrypt_cache_dir: /data/cache
    tls_letsencrypt_challenge_type: HTTP-01
    tls_letsencrypt_listen: ":http"

    ## Use already defined certificates:
    tls_cert_path: ""
    tls_key_path: ""

    log:
      # Output formatting for logs: text or json
      format: text
      level: info
    policy:
      mode: file
      path: ""
    dns:
      magic_dns: false
      base_domain: "{{ .Values.app.zone }}"
      nameservers:
        global:
          - 1.1.1.1
          - 1.0.0.1
          - 2606:4700:4700::1111
          - 2606:4700:4700::1001
        split:
          {}
      search_domains: []
      extra_records: []
    unix_socket: /var/run/headscale/headscale.sock
    unix_socket_permission: "0770"
    logtail:
      enabled: true
    randomize_client_port: false

    oidc:
      only_start_if_oidc_is_available: true
      issuer: {{ .Values.oidc.issuerUrl }}
      client_id: {{ .Values.oidc.clientId }}
      client_secret: {{ .Values.oidc.clientSecret }}
      scope: ["openid", "profile", "email", "custom"]


storage:
  data:
    enabled: true
    storageClass: ""
    existingClaim: ""
    accessMode: ReadWriteOnce
    size: 1Gi


serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  #readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 100
  # allowPrivilegeEscalation: false

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      Upgrade $http_upgrade
      Connection $connection_upgrade
      Host $server_name
      X-Real-IP $remote_addr
      X-Forwarded-For $proxy_add_x_forwarded_for
      X-Forwarded-Proto $scheme
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-redirect-from: "http://"
    nginx.ingress.kubernetes.io/proxy-redirect-to: "https://"
    nginx.ingress.kubernetes.io/hsts: "true"
    nginx.ingress.kubernetes.io/hsts-max-age: "15552000"
    nginx.ingress.kubernetes.io/hsts-include-subdomains: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
