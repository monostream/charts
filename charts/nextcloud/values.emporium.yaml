nextcloud:
  ingress:
    enabled: true
    
    annotations:
      {{- if .Emporium.Annotations }}
      {{- toYaml .Emporium.Annotations | nindent 6 }}
      {{- end }}
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 5000m
    hosts:
      - host: {{ .Emporium.Subdomain }}.{{ .Emporium.DNSZone }}
        paths:
          - path: /
            pathType: Prefix

    tls:
      - secretName: nextcloud-tls
        hosts:
          - {{ .Emporium.Subdomain }}.{{ .Emporium.DNSZone }}

  phpClientHttpsFix:
    enabled: true
    protocol: https

  nextcloud:
    host: {{ .Emporium.Subdomain }}.{{ .Emporium.DNSZone }}
    username: admin
    password: changeme
    ## Use an existing secret
    existingSecret:
      enabled: false
      # secretName: nameofsecret
      # usernameKey: nextcloud-username
      # passwordKey: nextcloud-password
      # tokenKey: nextcloud-token
      # smtpUsernameKey: smtp-username
      # smtpPasswordKey: smtp-password
    update: 0
    # If web server is not binding default port, you can define it
    containerPort: 80
    datadir: /var/www/html/data
    persistence:
      subPath:
    mail:
      enabled: false
      fromAddress: user
      domain: {{ .Emporium.Subdomain }}.{{ .Emporium.DNSZone }}
      smtp:
        host: domain.com
        secure: ssl
        port: 465
        authtype: LOGIN
        name: user
        password: pass
    # PHP Configuration files
    # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
    phpConfigs: {}
    # Default config files
    # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
    # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/16.0/apache/config
    defaultConfigs:
      # To protect /var/www/html/config
      .htaccess: true
      # Redis default configuration
      redis.config.php: true
      # Apache configuration for rewrite urls
      apache-pretty-urls.config.php: true
      # Define APCu as local cache
      apcu.config.php: true
      # Apps directory configs
      apps.config.php: true
      # Used for auto configure database
      autoconfig.php: true
      # SMTP default configuration
      smtp.config.php: true
    # Extra config files created in /var/www/html/config/
    # ref: https://docs.nextcloud.com/server/15/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
    configs: {}

    # For example, to use S3 as primary storage
    # ref: https://docs.nextcloud.com/server/13/admin_manual/configuration_files/primary_storage.html#simple-storage-service-s3
    #
    #  configs:
    #    s3.config.php: |-
    #      <?php
    #      $CONFIG = array (
    #        'objectstore' => array(
    #          'class' => '\\OC\\Files\\ObjectStore\\S3',
    #          'arguments' => array(
    #            'bucket'     => 'my-bucket',
    #            'autocreate' => true,
    #            'key'        => 'xxx',
    #            'secret'     => 'xxx',
    #            'region'     => 'us-east-1',
    #            'use_ssl'    => true
    #          )
    #        )
    #      );

    ## Strategy used to replace old pods
    ## IMPORTANT: use with care, it is suggested to leave as that for upgrade purposes
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    strategy:
      type: Recreate
      # type: RollingUpdate
      # rollingUpdate:
      #   maxSurge: 1
      #   maxUnavailable: 0

    ##
    ## Extra environment variables
    extraEnv:
    #  - name: SOME_SECRET_ENV
    #    valueFrom:
    #      secretKeyRef:
    #        name: nextcloud
    #        key: secret_key

    # Extra init containers that runs before pods start.
    extraInitContainers: []
    #  - name: do-something
    #    image: busybox
    #    command: ['do', 'something']

    # Extra sidecar containers.
    extraSidecarContainers: []
    #  - name: nextcloud-logger
    #    image: busybox
    #    command: [/bin/sh, -c, 'while ! test -f "/run/nextcloud/data/nextcloud.log"; do sleep 1; done; tail -n+1 -f /run/nextcloud/data/nextcloud.log']
    #    volumeMounts:
    #    - name: nextcloud-data
    #      mountPath: /run/nextcloud/data

    # Extra mounts for the pods. Example shown is for connecting a legacy NFS volume
    # to NextCloud pods in Kubernetes. This can then be configured in External Storage
    extraVolumes:
    #  - name: nfs
    #    nfs:
    #      server: "10.0.0.1"
    #      path: "/nextcloud_data"
    #      readOnly: false
    extraVolumeMounts:
    #  - name: nfs
    #    mountPath: "/legacy_data"

    # Set securityContext parameters for the nextcloud CONTAINER only (will not affect nginx container).
    # For example, you may need to define runAsNonRoot directive
    securityContext: {}
    #   runAsUser: 33
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: false

    # Set securityContext parameters for the entire pod. For example, you may need to define runAsNonRoot directive
    podSecurityContext: {}
    #   runAsUser: 33
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: false



  internalDatabase:
    enabled: false
    name: nextcloud

  ##
  ## External database configuration
  ##
  externalDatabase:
    enabled: true

    ## Supported database engines: mysql or postgresql
    type: postgres

    ## Database host
    host: nextcloud-postgres

    ## Database user
    user: nextcloud

    ## Database password
    password: nextcloud

    ## Database name
    database: nextcloud

    ## Use a existing secret
    existingSecret:
      enabled: false
      # secretName: nameofsecret
      # usernameKey: db-username
      # passwordKey: db-password

  postgresql:
    enabled: true
    global:
      postgresql:
        # global.postgresql.auth overrides postgresql.auth
        auth:
          username: nextcloud
          password: nextcloud
          database: nextcloud
          # Name of existing secret to use for PostgreSQL credentials.
          # auth.postgresPassword, auth.password, and auth.replicationPassword will be ignored and picked up from this secret.
          # secret might also contains the key ldap-password if LDAP is enabled.
          # ldap.bind_password will be ignored and picked from this secret in this case.
          existingSecret: ""
          # Names of keys in existing secret to use for PostgreSQL credentials
          secretKeys:
            adminPasswordKey: ""
            userPasswordKey: ""
            replicationPasswordKey: ""
    primary:
      persistence:
        enabled: true
        size: 8Gi
        # Use an existing Persistent Volume Claim (must be created ahead of time)
        # existingClaim: ""
        # storageClass: ""

  ##
  ## Redis chart configuration
  ## for more options see https://github.com/bitnami/charts/tree/main/bitnami/redis
  ##

  redis:
    enabled: true
    auth:
      enabled: true
      password: 'changeme'
      # name of an existing secret with RedisÂ® credentials (instead of auth.password), must be created ahead of time
      existingSecret: ""
      # Password key to be retrieved from existing secret
      existingSecretPasswordKey: ""


## @userSupplied StorageSize
## @label StorageSize
## @type string
## @description The size of the storage volume
  persistence:
    # Nextcloud Data (/var/www/html)
    enabled: true
    annotations: {}

    accessMode: ReadWriteOnce
    size: "{{ .Emporium.UserSupplied.StorageSize }}"

    ## Use an additional pvc for the data directory rather than a subpath of the default PVC
    ## Useful to store data on a different storageClass (e.g. on slower disks)
    nextcloudData:
      enabled: false
      subPath:
      annotations: {}
      # storageClass: "-"
      # existingClaim:
      accessMode: ReadWriteOnce
      size: 100Gi
