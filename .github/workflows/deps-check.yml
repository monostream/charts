name: Deps Checker

on:
  schedule:
    - cron: '0 8 * * 1-5' 
  workflow_dispatch:

jobs:
  check-updates:
    runs-on: ubuntu-latest
    container: 
      image: monostream/deps-checker:latest
      options: --user root
    outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debugging Information
      run: |
        echo "Current Directory:"
        pwd
        echo "List files:"
        ls -lah
        echo "Git Version:"
        git --version
        echo "Git Configuration:"
        git config --list
        git config --global --add safe.directory ${PWD}
        git pull
    
    - name: Setup Git
      run: |
        git config user.email "roboterli@users.noreply.github.com"
        git config user.name "Roboterli"
        git fetch origin
        if ! git checkout feature/update-deps 2>/dev/null; then
            git checkout -b feature/update-deps
        else
            git pull origin feature/update-deps
        fi

    - name: Find and Run Update Scripts
      run: |
        find . -name 'update-deps.sh' -execdir sh -c 'echo "\n---" && bash {}' \; >> deps-update-output.txt; cat deps-update-output.txt

    - name: Check for deps changes
      id: git_changes
      run: |
        if git status --porcelain | grep -q "deps.json"; then
          echo "changes=true" >> $GITHUB_OUTPUT
          git add .
          git commit -m "Prepare for dependency update"
          git push origin feature/update-deps
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Check for existing PR and Create if not exists
      uses: actions/github-script@v7
      if: steps.git_changes.outputs.changes == 'true'
      with:
        script: |
          const fs = require('fs');
          const { repo, owner } = context.repo;
          const depsUpdateOutput = fs.readFileSync('${{ github.workspace }}/deps-update-output.txt', 'utf8');

          const { data: existingPRs } = await github.rest.pulls.list({
            owner,
            repo,
            head: 'monostream:feature/update-deps',
            base: 'main'
          });
          let prNumber = null;
          if (existingPRs.length === 0) {
            const pr = await github.rest.pulls.create({
              owner,
              repo,
              title: 'Update deps',
              head: 'feature/update-deps',
              base: 'main',
              body: `Update dependencies:\n\n${depsUpdateOutput}`,
            });
            prNumber = pr.number;
          } else {
            prNumber = existingPRs[0].number;
            let body = existingPRs[0].body || '';
            body += `\n\nUpdate dependencies:\n\n${depsUpdateOutput}`;
            
            await github.rest.pulls.update({
              owner,
              repo,
              pull_number: prNumber,
              body: body,
            });
          }
          core.setOutput('pr-number', prNumber);
